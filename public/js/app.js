"use strict";!function(){for(var t=function(t){var e=new CustomEvent("FORM_SUBMISSION",{detail:t.data}),a=t.data.type,n=void 0!==a&&a;document.dispatchEvent(e),t.el.textContent=t.msg,t.el.classList.remove("hidden"),t.el.classList.add("alert-"+t.alert,"visible"),setTimeout(function(){t.el.classList.add("hidden"),t.el.classList.remove("alert-"+t.alert,"visible")},"delete"==n?1e7:5e3)},e=document.getElementsByClassName("form"),a=function(a,n){e[a].addEventListener("submit",function(n){n.preventDefault();var s=JSON.parse(this.getAttribute("data-api")),i=e[a].getElementsByClassName("form__alert"),d=new FormData(e[a]);try{axios({method:s.method,url:s.action,headers:{"Content-Type":"multipart/form-data"},data:d}).then(function(n){var s=n.data,d=s.alert,l=s.msg;"add"==s.type&&e[a].reset(),t({el:i[0],alert:d,msg:l,data:n.data})}).catch(function(e){t({el:i[0],alert:"danger",msg:"Ошибка сервера",data:{type:"err"}})})}catch(e){t({el:i[0],alert:"danger",msg:"Ошибка при отправке формы",data:{type:"err"}})}})},n=0,s=e.length;s>n;n++)a(n)}(),function(){!function(){for(var t=document.getElementsByClassName("show-modal"),e=0,a=t.length;a>e;e++)t[e].addEventListener("click",function(){var t=this.getAttribute("data-id-modal");document.querySelector(".modal#"+t).classList.add("active")})}();!function(){for(var t=document.getElementsByClassName("modal-close"),e=0,a=t.length;a>e;e++)t[e].addEventListener("click",function(){document.querySelector(".modal.active").classList.remove("active")})}()}(),function(){for(var t=document.getElementsByClassName("tab__item"),e=function(e,a){t[e].addEventListener("click",function(a){var n=this,s=t[e].parentNode.querySelector(".tab__item.active");document.getElementById(s.getAttribute("data-id")).classList.remove("active"),s.classList.remove("active"),a.path.some(function(t){if(t.classList.contains("tab")){var e=t.querySelector(".tab__title");return e&&(e.textContent=n.textContent),!0}}),this.classList.add("active"),document.getElementById(this.getAttribute("data-id")).classList.add("active")})},a=0,n=t.length;n>a;a++)e(a)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
